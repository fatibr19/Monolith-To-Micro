/*
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.ide.contentassist.antlr;

import com.ensias.dsl.ide.contentassist.antlr.internal.InternalMicroserviceDSLParser;
import com.ensias.dsl.services.MicroserviceDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MicroserviceDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MicroserviceDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MicroserviceDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getServiceConfigEntryAccess().getAlternatives(), "rule__ServiceConfigEntry__Alternatives");
			builder.put(grammarAccess.getActuatorConfigAccess().getMetricsEnabledAlternatives_3_1_0(), "rule__ActuatorConfig__MetricsEnabledAlternatives_3_1_0");
			builder.put(grammarAccess.getActuatorConfigAccess().getInfoEnabledAlternatives_4_1_0(), "rule__ActuatorConfig__InfoEnabledAlternatives_4_1_0");
			builder.put(grammarAccess.getDependencyAccess().getAlternatives(), "rule__Dependency__Alternatives");
			builder.put(grammarAccess.getDatabaseDriverAccess().getAlternatives(), "rule__DatabaseDriver__Alternatives");
			builder.put(grammarAccess.getDdlTypeAccess().getAlternatives(), "rule__DdlType__Alternatives");
			builder.put(grammarAccess.getLogLevelAccess().getAlternatives(), "rule__LogLevel__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getDiscoveryAccess().getGroup(), "rule__Discovery__Group__0");
			builder.put(grammarAccess.getDiscoveryAccess().getGroup_5(), "rule__Discovery__Group_5__0");
			builder.put(grammarAccess.getGatewayAccess().getGroup(), "rule__Gateway__Group__0");
			builder.put(grammarAccess.getGatewayAccess().getGroup_5(), "rule__Gateway__Group_5__0");
			builder.put(grammarAccess.getRouteConfigAccess().getGroup(), "rule__RouteConfig__Group__0");
			builder.put(grammarAccess.getConfigServerAccess().getGroup(), "rule__ConfigServer__Group__0");
			builder.put(grammarAccess.getConfigServerAccess().getGroup_7(), "rule__ConfigServer__Group_7__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServerConfigAccess().getGroup(), "rule__ServerConfig__Group__0");
			builder.put(grammarAccess.getServerConfigAccess().getGroup_4(), "rule__ServerConfig__Group_4__0");
			builder.put(grammarAccess.getApplicationConfigAccess().getGroup(), "rule__ApplicationConfig__Group__0");
			builder.put(grammarAccess.getApplicationConfigAccess().getGroup_2(), "rule__ApplicationConfig__Group_2__0");
			builder.put(grammarAccess.getApplicationConfigAccess().getGroup_3(), "rule__ApplicationConfig__Group_3__0");
			builder.put(grammarAccess.getApplicationConfigAccess().getGroup_4(), "rule__ApplicationConfig__Group_4__0");
			builder.put(grammarAccess.getDatabaseConfigAccess().getGroup(), "rule__DatabaseConfig__Group__0");
			builder.put(grammarAccess.getDatabaseConfigAccess().getGroup_10(), "rule__DatabaseConfig__Group_10__0");
			builder.put(grammarAccess.getActuatorConfigAccess().getGroup(), "rule__ActuatorConfig__Group__0");
			builder.put(grammarAccess.getActuatorConfigAccess().getGroup_2(), "rule__ActuatorConfig__Group_2__0");
			builder.put(grammarAccess.getActuatorConfigAccess().getGroup_3(), "rule__ActuatorConfig__Group_3__0");
			builder.put(grammarAccess.getActuatorConfigAccess().getGroup_4(), "rule__ActuatorConfig__Group_4__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getGroupNameAssignment_3(), "rule__Model__GroupNameAssignment_3");
			builder.put(grammarAccess.getModelAccess().getVersionAssignment_5(), "rule__Model__VersionAssignment_5");
			builder.put(grammarAccess.getModelAccess().getDescriptionAssignment_7(), "rule__Model__DescriptionAssignment_7");
			builder.put(grammarAccess.getModelAccess().getDiscoveryAssignment_9(), "rule__Model__DiscoveryAssignment_9");
			builder.put(grammarAccess.getModelAccess().getConfigServerAssignment_10(), "rule__Model__ConfigServerAssignment_10");
			builder.put(grammarAccess.getModelAccess().getServicesAssignment_11(), "rule__Model__ServicesAssignment_11");
			builder.put(grammarAccess.getModelAccess().getGatewayAssignment_12(), "rule__Model__GatewayAssignment_12");
			builder.put(grammarAccess.getDiscoveryAccess().getNameAssignment_1(), "rule__Discovery__NameAssignment_1");
			builder.put(grammarAccess.getDiscoveryAccess().getPortAssignment_4(), "rule__Discovery__PortAssignment_4");
			builder.put(grammarAccess.getDiscoveryAccess().getDefaultZoneAssignment_5_1(), "rule__Discovery__DefaultZoneAssignment_5_1");
			builder.put(grammarAccess.getDiscoveryAccess().getCustomDepsAssignment_8(), "rule__Discovery__CustomDepsAssignment_8");
			builder.put(grammarAccess.getGatewayAccess().getNameAssignment_1(), "rule__Gateway__NameAssignment_1");
			builder.put(grammarAccess.getGatewayAccess().getPortAssignment_4(), "rule__Gateway__PortAssignment_4");
			builder.put(grammarAccess.getGatewayAccess().getRoutesAssignment_5_2(), "rule__Gateway__RoutesAssignment_5_2");
			builder.put(grammarAccess.getGatewayAccess().getCustomDepsAssignment_8(), "rule__Gateway__CustomDepsAssignment_8");
			builder.put(grammarAccess.getRouteConfigAccess().getPathAssignment_3(), "rule__RouteConfig__PathAssignment_3");
			builder.put(grammarAccess.getRouteConfigAccess().getServiceAssignment_5(), "rule__RouteConfig__ServiceAssignment_5");
			builder.put(grammarAccess.getConfigServerAccess().getNameAssignment_1(), "rule__ConfigServer__NameAssignment_1");
			builder.put(grammarAccess.getConfigServerAccess().getPortAssignment_4(), "rule__ConfigServer__PortAssignment_4");
			builder.put(grammarAccess.getConfigServerAccess().getGitUriAssignment_6(), "rule__ConfigServer__GitUriAssignment_6");
			builder.put(grammarAccess.getConfigServerAccess().getGitBranchAssignment_7_1(), "rule__ConfigServer__GitBranchAssignment_7_1");
			builder.put(grammarAccess.getConfigServerAccess().getCustomDepsAssignment_10(), "rule__ConfigServer__CustomDepsAssignment_10");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getDependenciesAssignment_5(), "rule__Service__DependenciesAssignment_5");
			builder.put(grammarAccess.getServiceAccess().getConfigurationAssignment_9(), "rule__Service__ConfigurationAssignment_9");
			builder.put(grammarAccess.getServerConfigAccess().getPortAssignment_3(), "rule__ServerConfig__PortAssignment_3");
			builder.put(grammarAccess.getServerConfigAccess().getContextPathAssignment_4_1(), "rule__ServerConfig__ContextPathAssignment_4_1");
			builder.put(grammarAccess.getApplicationConfigAccess().getAppNameAssignment_2_1(), "rule__ApplicationConfig__AppNameAssignment_2_1");
			builder.put(grammarAccess.getApplicationConfigAccess().getProfileAssignment_3_1(), "rule__ApplicationConfig__ProfileAssignment_3_1");
			builder.put(grammarAccess.getApplicationConfigAccess().getLoggingLevelAssignment_4_1(), "rule__ApplicationConfig__LoggingLevelAssignment_4_1");
			builder.put(grammarAccess.getDatabaseConfigAccess().getDbUrlAssignment_3(), "rule__DatabaseConfig__DbUrlAssignment_3");
			builder.put(grammarAccess.getDatabaseConfigAccess().getDbUsernameAssignment_5(), "rule__DatabaseConfig__DbUsernameAssignment_5");
			builder.put(grammarAccess.getDatabaseConfigAccess().getDbPasswordAssignment_7(), "rule__DatabaseConfig__DbPasswordAssignment_7");
			builder.put(grammarAccess.getDatabaseConfigAccess().getDriverAssignment_9(), "rule__DatabaseConfig__DriverAssignment_9");
			builder.put(grammarAccess.getDatabaseConfigAccess().getDdlAssignment_10_1(), "rule__DatabaseConfig__DdlAssignment_10_1");
			builder.put(grammarAccess.getActuatorConfigAccess().getHealthcheckPathAssignment_2_1(), "rule__ActuatorConfig__HealthcheckPathAssignment_2_1");
			builder.put(grammarAccess.getActuatorConfigAccess().getMetricsEnabledAssignment_3_1(), "rule__ActuatorConfig__MetricsEnabledAssignment_3_1");
			builder.put(grammarAccess.getActuatorConfigAccess().getInfoEnabledAssignment_4_1(), "rule__ActuatorConfig__InfoEnabledAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MicroserviceDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMicroserviceDSLParser createParser() {
		InternalMicroserviceDSLParser result = new InternalMicroserviceDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MicroserviceDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MicroserviceDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
