/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.impl;

import com.ensias.dsl.microserviceDSL.ActuatorConfig;
import com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actuator Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ActuatorConfigImpl#getHealthcheckPath <em>Healthcheck Path</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ActuatorConfigImpl#getMetricsEnabled <em>Metrics Enabled</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ActuatorConfigImpl#getInfoEnabled <em>Info Enabled</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActuatorConfigImpl extends ServiceConfigEntryImpl implements ActuatorConfig
{
  /**
   * The default value of the '{@link #getHealthcheckPath() <em>Healthcheck Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHealthcheckPath()
   * @generated
   * @ordered
   */
  protected static final String HEALTHCHECK_PATH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHealthcheckPath() <em>Healthcheck Path</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHealthcheckPath()
   * @generated
   * @ordered
   */
  protected String healthcheckPath = HEALTHCHECK_PATH_EDEFAULT;

  /**
   * The default value of the '{@link #getMetricsEnabled() <em>Metrics Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetricsEnabled()
   * @generated
   * @ordered
   */
  protected static final String METRICS_ENABLED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMetricsEnabled() <em>Metrics Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetricsEnabled()
   * @generated
   * @ordered
   */
  protected String metricsEnabled = METRICS_ENABLED_EDEFAULT;

  /**
   * The default value of the '{@link #getInfoEnabled() <em>Info Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInfoEnabled()
   * @generated
   * @ordered
   */
  protected static final String INFO_ENABLED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInfoEnabled() <em>Info Enabled</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInfoEnabled()
   * @generated
   * @ordered
   */
  protected String infoEnabled = INFO_ENABLED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActuatorConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MicroserviceDSLPackage.Literals.ACTUATOR_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHealthcheckPath()
  {
    return healthcheckPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHealthcheckPath(String newHealthcheckPath)
  {
    String oldHealthcheckPath = healthcheckPath;
    healthcheckPath = newHealthcheckPath;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.ACTUATOR_CONFIG__HEALTHCHECK_PATH, oldHealthcheckPath, healthcheckPath));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMetricsEnabled()
  {
    return metricsEnabled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetricsEnabled(String newMetricsEnabled)
  {
    String oldMetricsEnabled = metricsEnabled;
    metricsEnabled = newMetricsEnabled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.ACTUATOR_CONFIG__METRICS_ENABLED, oldMetricsEnabled, metricsEnabled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInfoEnabled()
  {
    return infoEnabled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInfoEnabled(String newInfoEnabled)
  {
    String oldInfoEnabled = infoEnabled;
    infoEnabled = newInfoEnabled;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.ACTUATOR_CONFIG__INFO_ENABLED, oldInfoEnabled, infoEnabled));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__HEALTHCHECK_PATH:
        return getHealthcheckPath();
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__METRICS_ENABLED:
        return getMetricsEnabled();
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__INFO_ENABLED:
        return getInfoEnabled();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__HEALTHCHECK_PATH:
        setHealthcheckPath((String)newValue);
        return;
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__METRICS_ENABLED:
        setMetricsEnabled((String)newValue);
        return;
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__INFO_ENABLED:
        setInfoEnabled((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__HEALTHCHECK_PATH:
        setHealthcheckPath(HEALTHCHECK_PATH_EDEFAULT);
        return;
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__METRICS_ENABLED:
        setMetricsEnabled(METRICS_ENABLED_EDEFAULT);
        return;
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__INFO_ENABLED:
        setInfoEnabled(INFO_ENABLED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__HEALTHCHECK_PATH:
        return HEALTHCHECK_PATH_EDEFAULT == null ? healthcheckPath != null : !HEALTHCHECK_PATH_EDEFAULT.equals(healthcheckPath);
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__METRICS_ENABLED:
        return METRICS_ENABLED_EDEFAULT == null ? metricsEnabled != null : !METRICS_ENABLED_EDEFAULT.equals(metricsEnabled);
      case MicroserviceDSLPackage.ACTUATOR_CONFIG__INFO_ENABLED:
        return INFO_ENABLED_EDEFAULT == null ? infoEnabled != null : !INFO_ENABLED_EDEFAULT.equals(infoEnabled);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (healthcheckPath: ");
    result.append(healthcheckPath);
    result.append(", metricsEnabled: ");
    result.append(metricsEnabled);
    result.append(", infoEnabled: ");
    result.append(infoEnabled);
    result.append(')');
    return result.toString();
  }

} //ActuatorConfigImpl
