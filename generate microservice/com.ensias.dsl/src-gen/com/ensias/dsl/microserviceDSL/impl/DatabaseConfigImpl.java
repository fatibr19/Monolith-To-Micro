/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.impl;

import com.ensias.dsl.microserviceDSL.DatabaseConfig;
import com.ensias.dsl.microserviceDSL.DatabaseDriver;
import com.ensias.dsl.microserviceDSL.DdlType;
import com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Database Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.DatabaseConfigImpl#getDbUrl <em>Db Url</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.DatabaseConfigImpl#getDbUsername <em>Db Username</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.DatabaseConfigImpl#getDbPassword <em>Db Password</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.DatabaseConfigImpl#getDriver <em>Driver</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.DatabaseConfigImpl#getDdl <em>Ddl</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatabaseConfigImpl extends ServiceConfigEntryImpl implements DatabaseConfig
{
  /**
   * The default value of the '{@link #getDbUrl() <em>Db Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbUrl()
   * @generated
   * @ordered
   */
  protected static final String DB_URL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDbUrl() <em>Db Url</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbUrl()
   * @generated
   * @ordered
   */
  protected String dbUrl = DB_URL_EDEFAULT;

  /**
   * The default value of the '{@link #getDbUsername() <em>Db Username</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbUsername()
   * @generated
   * @ordered
   */
  protected static final String DB_USERNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDbUsername() <em>Db Username</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbUsername()
   * @generated
   * @ordered
   */
  protected String dbUsername = DB_USERNAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDbPassword() <em>Db Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbPassword()
   * @generated
   * @ordered
   */
  protected static final String DB_PASSWORD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDbPassword() <em>Db Password</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDbPassword()
   * @generated
   * @ordered
   */
  protected String dbPassword = DB_PASSWORD_EDEFAULT;

  /**
   * The default value of the '{@link #getDriver() <em>Driver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDriver()
   * @generated
   * @ordered
   */
  protected static final DatabaseDriver DRIVER_EDEFAULT = DatabaseDriver.MYSQL;

  /**
   * The cached value of the '{@link #getDriver() <em>Driver</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDriver()
   * @generated
   * @ordered
   */
  protected DatabaseDriver driver = DRIVER_EDEFAULT;

  /**
   * The default value of the '{@link #getDdl() <em>Ddl</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDdl()
   * @generated
   * @ordered
   */
  protected static final DdlType DDL_EDEFAULT = DdlType.CREATE;

  /**
   * The cached value of the '{@link #getDdl() <em>Ddl</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDdl()
   * @generated
   * @ordered
   */
  protected DdlType ddl = DDL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MicroserviceDSLPackage.Literals.DATABASE_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDbUrl()
  {
    return dbUrl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDbUrl(String newDbUrl)
  {
    String oldDbUrl = dbUrl;
    dbUrl = newDbUrl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.DATABASE_CONFIG__DB_URL, oldDbUrl, dbUrl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDbUsername()
  {
    return dbUsername;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDbUsername(String newDbUsername)
  {
    String oldDbUsername = dbUsername;
    dbUsername = newDbUsername;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.DATABASE_CONFIG__DB_USERNAME, oldDbUsername, dbUsername));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDbPassword()
  {
    return dbPassword;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDbPassword(String newDbPassword)
  {
    String oldDbPassword = dbPassword;
    dbPassword = newDbPassword;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.DATABASE_CONFIG__DB_PASSWORD, oldDbPassword, dbPassword));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseDriver getDriver()
  {
    return driver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDriver(DatabaseDriver newDriver)
  {
    DatabaseDriver oldDriver = driver;
    driver = newDriver == null ? DRIVER_EDEFAULT : newDriver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.DATABASE_CONFIG__DRIVER, oldDriver, driver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DdlType getDdl()
  {
    return ddl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDdl(DdlType newDdl)
  {
    DdlType oldDdl = ddl;
    ddl = newDdl == null ? DDL_EDEFAULT : newDdl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.DATABASE_CONFIG__DDL, oldDdl, ddl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_URL:
        return getDbUrl();
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_USERNAME:
        return getDbUsername();
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_PASSWORD:
        return getDbPassword();
      case MicroserviceDSLPackage.DATABASE_CONFIG__DRIVER:
        return getDriver();
      case MicroserviceDSLPackage.DATABASE_CONFIG__DDL:
        return getDdl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_URL:
        setDbUrl((String)newValue);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_USERNAME:
        setDbUsername((String)newValue);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_PASSWORD:
        setDbPassword((String)newValue);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DRIVER:
        setDriver((DatabaseDriver)newValue);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DDL:
        setDdl((DdlType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_URL:
        setDbUrl(DB_URL_EDEFAULT);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_USERNAME:
        setDbUsername(DB_USERNAME_EDEFAULT);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_PASSWORD:
        setDbPassword(DB_PASSWORD_EDEFAULT);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DRIVER:
        setDriver(DRIVER_EDEFAULT);
        return;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DDL:
        setDdl(DDL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_URL:
        return DB_URL_EDEFAULT == null ? dbUrl != null : !DB_URL_EDEFAULT.equals(dbUrl);
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_USERNAME:
        return DB_USERNAME_EDEFAULT == null ? dbUsername != null : !DB_USERNAME_EDEFAULT.equals(dbUsername);
      case MicroserviceDSLPackage.DATABASE_CONFIG__DB_PASSWORD:
        return DB_PASSWORD_EDEFAULT == null ? dbPassword != null : !DB_PASSWORD_EDEFAULT.equals(dbPassword);
      case MicroserviceDSLPackage.DATABASE_CONFIG__DRIVER:
        return driver != DRIVER_EDEFAULT;
      case MicroserviceDSLPackage.DATABASE_CONFIG__DDL:
        return ddl != DDL_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dbUrl: ");
    result.append(dbUrl);
    result.append(", dbUsername: ");
    result.append(dbUsername);
    result.append(", dbPassword: ");
    result.append(dbPassword);
    result.append(", driver: ");
    result.append(driver);
    result.append(", ddl: ");
    result.append(ddl);
    result.append(')');
    return result.toString();
  }

} //DatabaseConfigImpl
