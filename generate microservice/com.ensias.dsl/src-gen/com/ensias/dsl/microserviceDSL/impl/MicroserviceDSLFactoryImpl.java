/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.impl;

import com.ensias.dsl.microserviceDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MicroserviceDSLFactoryImpl extends EFactoryImpl implements MicroserviceDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MicroserviceDSLFactory init()
  {
    try
    {
      MicroserviceDSLFactory theMicroserviceDSLFactory = (MicroserviceDSLFactory)EPackage.Registry.INSTANCE.getEFactory(MicroserviceDSLPackage.eNS_URI);
      if (theMicroserviceDSLFactory != null)
      {
        return theMicroserviceDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MicroserviceDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MicroserviceDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MicroserviceDSLPackage.MODEL: return createModel();
      case MicroserviceDSLPackage.DISCOVERY: return createDiscovery();
      case MicroserviceDSLPackage.GATEWAY: return createGateway();
      case MicroserviceDSLPackage.ROUTE_CONFIG: return createRouteConfig();
      case MicroserviceDSLPackage.CONFIG_SERVER: return createConfigServer();
      case MicroserviceDSLPackage.SERVICE: return createService();
      case MicroserviceDSLPackage.SERVICE_CONFIG_ENTRY: return createServiceConfigEntry();
      case MicroserviceDSLPackage.SERVER_CONFIG: return createServerConfig();
      case MicroserviceDSLPackage.APPLICATION_CONFIG: return createApplicationConfig();
      case MicroserviceDSLPackage.DATABASE_CONFIG: return createDatabaseConfig();
      case MicroserviceDSLPackage.ACTUATOR_CONFIG: return createActuatorConfig();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MicroserviceDSLPackage.DEPENDENCY:
        return createDependencyFromString(eDataType, initialValue);
      case MicroserviceDSLPackage.DATABASE_DRIVER:
        return createDatabaseDriverFromString(eDataType, initialValue);
      case MicroserviceDSLPackage.DDL_TYPE:
        return createDdlTypeFromString(eDataType, initialValue);
      case MicroserviceDSLPackage.LOG_LEVEL:
        return createLogLevelFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MicroserviceDSLPackage.DEPENDENCY:
        return convertDependencyToString(eDataType, instanceValue);
      case MicroserviceDSLPackage.DATABASE_DRIVER:
        return convertDatabaseDriverToString(eDataType, instanceValue);
      case MicroserviceDSLPackage.DDL_TYPE:
        return convertDdlTypeToString(eDataType, instanceValue);
      case MicroserviceDSLPackage.LOG_LEVEL:
        return convertLogLevelToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Discovery createDiscovery()
  {
    DiscoveryImpl discovery = new DiscoveryImpl();
    return discovery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gateway createGateway()
  {
    GatewayImpl gateway = new GatewayImpl();
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RouteConfig createRouteConfig()
  {
    RouteConfigImpl routeConfig = new RouteConfigImpl();
    return routeConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigServer createConfigServer()
  {
    ConfigServerImpl configServer = new ConfigServerImpl();
    return configServer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceConfigEntry createServiceConfigEntry()
  {
    ServiceConfigEntryImpl serviceConfigEntry = new ServiceConfigEntryImpl();
    return serviceConfigEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServerConfig createServerConfig()
  {
    ServerConfigImpl serverConfig = new ServerConfigImpl();
    return serverConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicationConfig createApplicationConfig()
  {
    ApplicationConfigImpl applicationConfig = new ApplicationConfigImpl();
    return applicationConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseConfig createDatabaseConfig()
  {
    DatabaseConfigImpl databaseConfig = new DatabaseConfigImpl();
    return databaseConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActuatorConfig createActuatorConfig()
  {
    ActuatorConfigImpl actuatorConfig = new ActuatorConfigImpl();
    return actuatorConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dependency createDependencyFromString(EDataType eDataType, String initialValue)
  {
    Dependency result = Dependency.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDependencyToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatabaseDriver createDatabaseDriverFromString(EDataType eDataType, String initialValue)
  {
    DatabaseDriver result = DatabaseDriver.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDatabaseDriverToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DdlType createDdlTypeFromString(EDataType eDataType, String initialValue)
  {
    DdlType result = DdlType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDdlTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogLevel createLogLevelFromString(EDataType eDataType, String initialValue)
  {
    LogLevel result = LogLevel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogLevelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MicroserviceDSLPackage getMicroserviceDSLPackage()
  {
    return (MicroserviceDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MicroserviceDSLPackage getPackage()
  {
    return MicroserviceDSLPackage.eINSTANCE;
  }

} //MicroserviceDSLFactoryImpl
