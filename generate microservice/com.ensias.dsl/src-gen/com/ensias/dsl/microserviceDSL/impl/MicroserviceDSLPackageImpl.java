/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.impl;

import com.ensias.dsl.microserviceDSL.ActuatorConfig;
import com.ensias.dsl.microserviceDSL.ApplicationConfig;
import com.ensias.dsl.microserviceDSL.ConfigServer;
import com.ensias.dsl.microserviceDSL.DatabaseConfig;
import com.ensias.dsl.microserviceDSL.DatabaseDriver;
import com.ensias.dsl.microserviceDSL.DdlType;
import com.ensias.dsl.microserviceDSL.Dependency;
import com.ensias.dsl.microserviceDSL.Discovery;
import com.ensias.dsl.microserviceDSL.Gateway;
import com.ensias.dsl.microserviceDSL.LogLevel;
import com.ensias.dsl.microserviceDSL.MicroserviceDSLFactory;
import com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage;
import com.ensias.dsl.microserviceDSL.Model;
import com.ensias.dsl.microserviceDSL.RouteConfig;
import com.ensias.dsl.microserviceDSL.ServerConfig;
import com.ensias.dsl.microserviceDSL.Service;
import com.ensias.dsl.microserviceDSL.ServiceConfigEntry;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MicroserviceDSLPackageImpl extends EPackageImpl implements MicroserviceDSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass discoveryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass gatewayEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass routeConfigEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configServerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serviceConfigEntryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass serverConfigEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass applicationConfigEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass databaseConfigEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actuatorConfigEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dependencyEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum databaseDriverEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum ddlTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum logLevelEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MicroserviceDSLPackageImpl()
  {
    super(eNS_URI, MicroserviceDSLFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MicroserviceDSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MicroserviceDSLPackage init()
  {
    if (isInited) return (MicroserviceDSLPackage)EPackage.Registry.INSTANCE.getEPackage(MicroserviceDSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMicroserviceDSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MicroserviceDSLPackageImpl theMicroserviceDSLPackage = registeredMicroserviceDSLPackage instanceof MicroserviceDSLPackageImpl ? (MicroserviceDSLPackageImpl)registeredMicroserviceDSLPackage : new MicroserviceDSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMicroserviceDSLPackage.createPackageContents();

    // Initialize created meta-data
    theMicroserviceDSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMicroserviceDSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MicroserviceDSLPackage.eNS_URI, theMicroserviceDSLPackage);
    return theMicroserviceDSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModel_Name()
  {
    return (EAttribute)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModel_GroupName()
  {
    return (EAttribute)modelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModel_Version()
  {
    return (EAttribute)modelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getModel_Description()
  {
    return (EAttribute)modelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Discovery()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_ConfigServer()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Services()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Gateway()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiscovery()
  {
    return discoveryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiscovery_Name()
  {
    return (EAttribute)discoveryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiscovery_Port()
  {
    return (EAttribute)discoveryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiscovery_DefaultZone()
  {
    return (EAttribute)discoveryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiscovery_CustomDeps()
  {
    return (EAttribute)discoveryEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGateway()
  {
    return gatewayEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGateway_Name()
  {
    return (EAttribute)gatewayEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGateway_Port()
  {
    return (EAttribute)gatewayEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getGateway_Routes()
  {
    return (EReference)gatewayEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGateway_CustomDeps()
  {
    return (EAttribute)gatewayEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRouteConfig()
  {
    return routeConfigEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRouteConfig_Path()
  {
    return (EAttribute)routeConfigEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRouteConfig_Service()
  {
    return (EReference)routeConfigEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigServer()
  {
    return configServerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigServer_Name()
  {
    return (EAttribute)configServerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigServer_Port()
  {
    return (EAttribute)configServerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigServer_GitUri()
  {
    return (EAttribute)configServerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigServer_GitBranch()
  {
    return (EAttribute)configServerEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigServer_CustomDeps()
  {
    return (EAttribute)configServerEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getService()
  {
    return serviceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Name()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getService_Dependencies()
  {
    return (EAttribute)serviceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getService_Configuration()
  {
    return (EReference)serviceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServiceConfigEntry()
  {
    return serviceConfigEntryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getServerConfig()
  {
    return serverConfigEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServerConfig_Port()
  {
    return (EAttribute)serverConfigEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getServerConfig_ContextPath()
  {
    return (EAttribute)serverConfigEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getApplicationConfig()
  {
    return applicationConfigEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getApplicationConfig_AppName()
  {
    return (EAttribute)applicationConfigEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getApplicationConfig_Profile()
  {
    return (EAttribute)applicationConfigEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getApplicationConfig_LoggingLevel()
  {
    return (EAttribute)applicationConfigEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDatabaseConfig()
  {
    return databaseConfigEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseConfig_DbUrl()
  {
    return (EAttribute)databaseConfigEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseConfig_DbUsername()
  {
    return (EAttribute)databaseConfigEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseConfig_DbPassword()
  {
    return (EAttribute)databaseConfigEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseConfig_Driver()
  {
    return (EAttribute)databaseConfigEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseConfig_Ddl()
  {
    return (EAttribute)databaseConfigEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getActuatorConfig()
  {
    return actuatorConfigEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getActuatorConfig_HealthcheckPath()
  {
    return (EAttribute)actuatorConfigEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getActuatorConfig_MetricsEnabled()
  {
    return (EAttribute)actuatorConfigEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getActuatorConfig_InfoEnabled()
  {
    return (EAttribute)actuatorConfigEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDependency()
  {
    return dependencyEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDatabaseDriver()
  {
    return databaseDriverEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDdlType()
  {
    return ddlTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getLogLevel()
  {
    return logLevelEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MicroserviceDSLFactory getMicroserviceDSLFactory()
  {
    return (MicroserviceDSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEAttribute(modelEClass, MODEL__NAME);
    createEAttribute(modelEClass, MODEL__GROUP_NAME);
    createEAttribute(modelEClass, MODEL__VERSION);
    createEAttribute(modelEClass, MODEL__DESCRIPTION);
    createEReference(modelEClass, MODEL__DISCOVERY);
    createEReference(modelEClass, MODEL__CONFIG_SERVER);
    createEReference(modelEClass, MODEL__SERVICES);
    createEReference(modelEClass, MODEL__GATEWAY);

    discoveryEClass = createEClass(DISCOVERY);
    createEAttribute(discoveryEClass, DISCOVERY__NAME);
    createEAttribute(discoveryEClass, DISCOVERY__PORT);
    createEAttribute(discoveryEClass, DISCOVERY__DEFAULT_ZONE);
    createEAttribute(discoveryEClass, DISCOVERY__CUSTOM_DEPS);

    gatewayEClass = createEClass(GATEWAY);
    createEAttribute(gatewayEClass, GATEWAY__NAME);
    createEAttribute(gatewayEClass, GATEWAY__PORT);
    createEReference(gatewayEClass, GATEWAY__ROUTES);
    createEAttribute(gatewayEClass, GATEWAY__CUSTOM_DEPS);

    routeConfigEClass = createEClass(ROUTE_CONFIG);
    createEAttribute(routeConfigEClass, ROUTE_CONFIG__PATH);
    createEReference(routeConfigEClass, ROUTE_CONFIG__SERVICE);

    configServerEClass = createEClass(CONFIG_SERVER);
    createEAttribute(configServerEClass, CONFIG_SERVER__NAME);
    createEAttribute(configServerEClass, CONFIG_SERVER__PORT);
    createEAttribute(configServerEClass, CONFIG_SERVER__GIT_URI);
    createEAttribute(configServerEClass, CONFIG_SERVER__GIT_BRANCH);
    createEAttribute(configServerEClass, CONFIG_SERVER__CUSTOM_DEPS);

    serviceEClass = createEClass(SERVICE);
    createEAttribute(serviceEClass, SERVICE__NAME);
    createEAttribute(serviceEClass, SERVICE__DEPENDENCIES);
    createEReference(serviceEClass, SERVICE__CONFIGURATION);

    serviceConfigEntryEClass = createEClass(SERVICE_CONFIG_ENTRY);

    serverConfigEClass = createEClass(SERVER_CONFIG);
    createEAttribute(serverConfigEClass, SERVER_CONFIG__PORT);
    createEAttribute(serverConfigEClass, SERVER_CONFIG__CONTEXT_PATH);

    applicationConfigEClass = createEClass(APPLICATION_CONFIG);
    createEAttribute(applicationConfigEClass, APPLICATION_CONFIG__APP_NAME);
    createEAttribute(applicationConfigEClass, APPLICATION_CONFIG__PROFILE);
    createEAttribute(applicationConfigEClass, APPLICATION_CONFIG__LOGGING_LEVEL);

    databaseConfigEClass = createEClass(DATABASE_CONFIG);
    createEAttribute(databaseConfigEClass, DATABASE_CONFIG__DB_URL);
    createEAttribute(databaseConfigEClass, DATABASE_CONFIG__DB_USERNAME);
    createEAttribute(databaseConfigEClass, DATABASE_CONFIG__DB_PASSWORD);
    createEAttribute(databaseConfigEClass, DATABASE_CONFIG__DRIVER);
    createEAttribute(databaseConfigEClass, DATABASE_CONFIG__DDL);

    actuatorConfigEClass = createEClass(ACTUATOR_CONFIG);
    createEAttribute(actuatorConfigEClass, ACTUATOR_CONFIG__HEALTHCHECK_PATH);
    createEAttribute(actuatorConfigEClass, ACTUATOR_CONFIG__METRICS_ENABLED);
    createEAttribute(actuatorConfigEClass, ACTUATOR_CONFIG__INFO_ENABLED);

    // Create enums
    dependencyEEnum = createEEnum(DEPENDENCY);
    databaseDriverEEnum = createEEnum(DATABASE_DRIVER);
    ddlTypeEEnum = createEEnum(DDL_TYPE);
    logLevelEEnum = createEEnum(LOG_LEVEL);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    serverConfigEClass.getESuperTypes().add(this.getServiceConfigEntry());
    applicationConfigEClass.getESuperTypes().add(this.getServiceConfigEntry());
    databaseConfigEClass.getESuperTypes().add(this.getServiceConfigEntry());
    actuatorConfigEClass.getESuperTypes().add(this.getServiceConfigEntry());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getModel_Name(), ecorePackage.getEString(), "name", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getModel_GroupName(), ecorePackage.getEString(), "groupName", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getModel_Version(), ecorePackage.getEString(), "version", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getModel_Description(), ecorePackage.getEString(), "description", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Discovery(), this.getDiscovery(), null, "discovery", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_ConfigServer(), this.getConfigServer(), null, "configServer", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Services(), this.getService(), null, "services", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getModel_Gateway(), this.getGateway(), null, "gateway", null, 0, 1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(discoveryEClass, Discovery.class, "Discovery", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiscovery_Name(), ecorePackage.getEString(), "name", null, 0, 1, Discovery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiscovery_Port(), ecorePackage.getEInt(), "port", null, 0, 1, Discovery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiscovery_DefaultZone(), ecorePackage.getEString(), "defaultZone", null, 0, 1, Discovery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiscovery_CustomDeps(), this.getDependency(), "customDeps", null, 0, -1, Discovery.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(gatewayEClass, Gateway.class, "Gateway", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGateway_Name(), ecorePackage.getEString(), "name", null, 0, 1, Gateway.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGateway_Port(), ecorePackage.getEInt(), "port", null, 0, 1, Gateway.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getGateway_Routes(), this.getRouteConfig(), null, "routes", null, 0, -1, Gateway.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGateway_CustomDeps(), this.getDependency(), "customDeps", null, 0, -1, Gateway.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(routeConfigEClass, RouteConfig.class, "RouteConfig", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRouteConfig_Path(), ecorePackage.getEString(), "path", null, 0, 1, RouteConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRouteConfig_Service(), this.getService(), null, "service", null, 0, 1, RouteConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configServerEClass, ConfigServer.class, "ConfigServer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConfigServer_Name(), ecorePackage.getEString(), "name", null, 0, 1, ConfigServer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigServer_Port(), ecorePackage.getEInt(), "port", null, 0, 1, ConfigServer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigServer_GitUri(), ecorePackage.getEString(), "gitUri", null, 0, 1, ConfigServer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigServer_GitBranch(), ecorePackage.getEString(), "gitBranch", null, 0, 1, ConfigServer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigServer_CustomDeps(), this.getDependency(), "customDeps", null, 0, -1, ConfigServer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceEClass, Service.class, "Service", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getService_Name(), ecorePackage.getEString(), "name", null, 0, 1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getService_Dependencies(), this.getDependency(), "dependencies", null, 0, -1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getService_Configuration(), this.getServiceConfigEntry(), null, "configuration", null, 0, -1, Service.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(serviceConfigEntryEClass, ServiceConfigEntry.class, "ServiceConfigEntry", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(serverConfigEClass, ServerConfig.class, "ServerConfig", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getServerConfig_Port(), ecorePackage.getEInt(), "port", null, 0, 1, ServerConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getServerConfig_ContextPath(), ecorePackage.getEString(), "contextPath", null, 0, 1, ServerConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(applicationConfigEClass, ApplicationConfig.class, "ApplicationConfig", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getApplicationConfig_AppName(), ecorePackage.getEString(), "appName", null, 0, 1, ApplicationConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getApplicationConfig_Profile(), ecorePackage.getEString(), "profile", null, 0, 1, ApplicationConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getApplicationConfig_LoggingLevel(), this.getLogLevel(), "loggingLevel", null, 0, 1, ApplicationConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(databaseConfigEClass, DatabaseConfig.class, "DatabaseConfig", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDatabaseConfig_DbUrl(), ecorePackage.getEString(), "dbUrl", null, 0, 1, DatabaseConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDatabaseConfig_DbUsername(), ecorePackage.getEString(), "dbUsername", null, 0, 1, DatabaseConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDatabaseConfig_DbPassword(), ecorePackage.getEString(), "dbPassword", null, 0, 1, DatabaseConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDatabaseConfig_Driver(), this.getDatabaseDriver(), "driver", null, 0, 1, DatabaseConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDatabaseConfig_Ddl(), this.getDdlType(), "ddl", null, 0, 1, DatabaseConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(actuatorConfigEClass, ActuatorConfig.class, "ActuatorConfig", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getActuatorConfig_HealthcheckPath(), ecorePackage.getEString(), "healthcheckPath", null, 0, 1, ActuatorConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getActuatorConfig_MetricsEnabled(), ecorePackage.getEString(), "metricsEnabled", null, 0, 1, ActuatorConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getActuatorConfig_InfoEnabled(), ecorePackage.getEString(), "infoEnabled", null, 0, 1, ActuatorConfig.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(dependencyEEnum, Dependency.class, "Dependency");
    addEEnumLiteral(dependencyEEnum, Dependency.JPA);
    addEEnumLiteral(dependencyEEnum, Dependency.SPRING_WEB);
    addEEnumLiteral(dependencyEEnum, Dependency.EUREKA_CLIENT);
    addEEnumLiteral(dependencyEEnum, Dependency.CONFIG_CLIENT);
    addEEnumLiteral(dependencyEEnum, Dependency.ACTUATOR);
    addEEnumLiteral(dependencyEEnum, Dependency.LOMBOK);

    initEEnum(databaseDriverEEnum, DatabaseDriver.class, "DatabaseDriver");
    addEEnumLiteral(databaseDriverEEnum, DatabaseDriver.MYSQL);
    addEEnumLiteral(databaseDriverEEnum, DatabaseDriver.POSTGRESQL);
    addEEnumLiteral(databaseDriverEEnum, DatabaseDriver.H2);

    initEEnum(ddlTypeEEnum, DdlType.class, "DdlType");
    addEEnumLiteral(ddlTypeEEnum, DdlType.CREATE);
    addEEnumLiteral(ddlTypeEEnum, DdlType.CREATE_UPDATE);

    initEEnum(logLevelEEnum, LogLevel.class, "LogLevel");
    addEEnumLiteral(logLevelEEnum, LogLevel.INFO);
    addEEnumLiteral(logLevelEEnum, LogLevel.DEBUG);
    addEEnumLiteral(logLevelEEnum, LogLevel.WARN);
    addEEnumLiteral(logLevelEEnum, LogLevel.ERROR);
    addEEnumLiteral(logLevelEEnum, LogLevel.TRACE);

    // Create resource
    createResource(eNS_URI);
  }

} //MicroserviceDSLPackageImpl
