/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.impl;

import com.ensias.dsl.microserviceDSL.ConfigServer;
import com.ensias.dsl.microserviceDSL.Discovery;
import com.ensias.dsl.microserviceDSL.Gateway;
import com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage;
import com.ensias.dsl.microserviceDSL.Model;
import com.ensias.dsl.microserviceDSL.Service;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getGroupName <em>Group Name</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getDiscovery <em>Discovery</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getConfigServer <em>Config Server</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getServices <em>Services</em>}</li>
 *   <li>{@link com.ensias.dsl.microserviceDSL.impl.ModelImpl#getGateway <em>Gateway</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getGroupName() <em>Group Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupName()
   * @generated
   * @ordered
   */
  protected static final String GROUP_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGroupName() <em>Group Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupName()
   * @generated
   * @ordered
   */
  protected String groupName = GROUP_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getDiscovery() <em>Discovery</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiscovery()
   * @generated
   * @ordered
   */
  protected Discovery discovery;

  /**
   * The cached value of the '{@link #getConfigServer() <em>Config Server</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigServer()
   * @generated
   * @ordered
   */
  protected ConfigServer configServer;

  /**
   * The cached value of the '{@link #getServices() <em>Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServices()
   * @generated
   * @ordered
   */
  protected EList<Service> services;

  /**
   * The cached value of the '{@link #getGateway() <em>Gateway</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateway()
   * @generated
   * @ordered
   */
  protected Gateway gateway;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MicroserviceDSLPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGroupName()
  {
    return groupName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroupName(String newGroupName)
  {
    String oldGroupName = groupName;
    groupName = newGroupName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__GROUP_NAME, oldGroupName, groupName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Discovery getDiscovery()
  {
    return discovery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiscovery(Discovery newDiscovery, NotificationChain msgs)
  {
    Discovery oldDiscovery = discovery;
    discovery = newDiscovery;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__DISCOVERY, oldDiscovery, newDiscovery);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDiscovery(Discovery newDiscovery)
  {
    if (newDiscovery != discovery)
    {
      NotificationChain msgs = null;
      if (discovery != null)
        msgs = ((InternalEObject)discovery).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__DISCOVERY, null, msgs);
      if (newDiscovery != null)
        msgs = ((InternalEObject)newDiscovery).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__DISCOVERY, null, msgs);
      msgs = basicSetDiscovery(newDiscovery, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__DISCOVERY, newDiscovery, newDiscovery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigServer getConfigServer()
  {
    return configServer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfigServer(ConfigServer newConfigServer, NotificationChain msgs)
  {
    ConfigServer oldConfigServer = configServer;
    configServer = newConfigServer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__CONFIG_SERVER, oldConfigServer, newConfigServer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfigServer(ConfigServer newConfigServer)
  {
    if (newConfigServer != configServer)
    {
      NotificationChain msgs = null;
      if (configServer != null)
        msgs = ((InternalEObject)configServer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__CONFIG_SERVER, null, msgs);
      if (newConfigServer != null)
        msgs = ((InternalEObject)newConfigServer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__CONFIG_SERVER, null, msgs);
      msgs = basicSetConfigServer(newConfigServer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__CONFIG_SERVER, newConfigServer, newConfigServer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getServices()
  {
    if (services == null)
    {
      services = new EObjectContainmentEList<Service>(Service.class, this, MicroserviceDSLPackage.MODEL__SERVICES);
    }
    return services;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gateway getGateway()
  {
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGateway(Gateway newGateway, NotificationChain msgs)
  {
    Gateway oldGateway = gateway;
    gateway = newGateway;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__GATEWAY, oldGateway, newGateway);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateway(Gateway newGateway)
  {
    if (newGateway != gateway)
    {
      NotificationChain msgs = null;
      if (gateway != null)
        msgs = ((InternalEObject)gateway).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__GATEWAY, null, msgs);
      if (newGateway != null)
        msgs = ((InternalEObject)newGateway).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MicroserviceDSLPackage.MODEL__GATEWAY, null, msgs);
      msgs = basicSetGateway(newGateway, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MicroserviceDSLPackage.MODEL__GATEWAY, newGateway, newGateway));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.MODEL__DISCOVERY:
        return basicSetDiscovery(null, msgs);
      case MicroserviceDSLPackage.MODEL__CONFIG_SERVER:
        return basicSetConfigServer(null, msgs);
      case MicroserviceDSLPackage.MODEL__SERVICES:
        return ((InternalEList<?>)getServices()).basicRemove(otherEnd, msgs);
      case MicroserviceDSLPackage.MODEL__GATEWAY:
        return basicSetGateway(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.MODEL__NAME:
        return getName();
      case MicroserviceDSLPackage.MODEL__GROUP_NAME:
        return getGroupName();
      case MicroserviceDSLPackage.MODEL__VERSION:
        return getVersion();
      case MicroserviceDSLPackage.MODEL__DESCRIPTION:
        return getDescription();
      case MicroserviceDSLPackage.MODEL__DISCOVERY:
        return getDiscovery();
      case MicroserviceDSLPackage.MODEL__CONFIG_SERVER:
        return getConfigServer();
      case MicroserviceDSLPackage.MODEL__SERVICES:
        return getServices();
      case MicroserviceDSLPackage.MODEL__GATEWAY:
        return getGateway();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.MODEL__NAME:
        setName((String)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__GROUP_NAME:
        setGroupName((String)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__VERSION:
        setVersion((String)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__DISCOVERY:
        setDiscovery((Discovery)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__CONFIG_SERVER:
        setConfigServer((ConfigServer)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__SERVICES:
        getServices().clear();
        getServices().addAll((Collection<? extends Service>)newValue);
        return;
      case MicroserviceDSLPackage.MODEL__GATEWAY:
        setGateway((Gateway)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MicroserviceDSLPackage.MODEL__GROUP_NAME:
        setGroupName(GROUP_NAME_EDEFAULT);
        return;
      case MicroserviceDSLPackage.MODEL__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case MicroserviceDSLPackage.MODEL__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case MicroserviceDSLPackage.MODEL__DISCOVERY:
        setDiscovery((Discovery)null);
        return;
      case MicroserviceDSLPackage.MODEL__CONFIG_SERVER:
        setConfigServer((ConfigServer)null);
        return;
      case MicroserviceDSLPackage.MODEL__SERVICES:
        getServices().clear();
        return;
      case MicroserviceDSLPackage.MODEL__GATEWAY:
        setGateway((Gateway)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MicroserviceDSLPackage.MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MicroserviceDSLPackage.MODEL__GROUP_NAME:
        return GROUP_NAME_EDEFAULT == null ? groupName != null : !GROUP_NAME_EDEFAULT.equals(groupName);
      case MicroserviceDSLPackage.MODEL__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case MicroserviceDSLPackage.MODEL__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case MicroserviceDSLPackage.MODEL__DISCOVERY:
        return discovery != null;
      case MicroserviceDSLPackage.MODEL__CONFIG_SERVER:
        return configServer != null;
      case MicroserviceDSLPackage.MODEL__SERVICES:
        return services != null && !services.isEmpty();
      case MicroserviceDSLPackage.MODEL__GATEWAY:
        return gateway != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", groupName: ");
    result.append(groupName);
    result.append(", version: ");
    result.append(version);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
