/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.microserviceDSL.util;

import com.ensias.dsl.microserviceDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.ensias.dsl.microserviceDSL.MicroserviceDSLPackage
 * @generated
 */
public class MicroserviceDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MicroserviceDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MicroserviceDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MicroserviceDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MicroserviceDSLSwitch<Adapter> modelSwitch =
    new MicroserviceDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDiscovery(Discovery object)
      {
        return createDiscoveryAdapter();
      }
      @Override
      public Adapter caseGateway(Gateway object)
      {
        return createGatewayAdapter();
      }
      @Override
      public Adapter caseRouteConfig(RouteConfig object)
      {
        return createRouteConfigAdapter();
      }
      @Override
      public Adapter caseConfigServer(ConfigServer object)
      {
        return createConfigServerAdapter();
      }
      @Override
      public Adapter caseService(Service object)
      {
        return createServiceAdapter();
      }
      @Override
      public Adapter caseServiceConfigEntry(ServiceConfigEntry object)
      {
        return createServiceConfigEntryAdapter();
      }
      @Override
      public Adapter caseServerConfig(ServerConfig object)
      {
        return createServerConfigAdapter();
      }
      @Override
      public Adapter caseApplicationConfig(ApplicationConfig object)
      {
        return createApplicationConfigAdapter();
      }
      @Override
      public Adapter caseDatabaseConfig(DatabaseConfig object)
      {
        return createDatabaseConfigAdapter();
      }
      @Override
      public Adapter caseActuatorConfig(ActuatorConfig object)
      {
        return createActuatorConfigAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.Discovery <em>Discovery</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.Discovery
   * @generated
   */
  public Adapter createDiscoveryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.Gateway <em>Gateway</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.Gateway
   * @generated
   */
  public Adapter createGatewayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.RouteConfig <em>Route Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.RouteConfig
   * @generated
   */
  public Adapter createRouteConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.ConfigServer <em>Config Server</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.ConfigServer
   * @generated
   */
  public Adapter createConfigServerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.Service <em>Service</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.Service
   * @generated
   */
  public Adapter createServiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.ServiceConfigEntry <em>Service Config Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.ServiceConfigEntry
   * @generated
   */
  public Adapter createServiceConfigEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.ServerConfig <em>Server Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.ServerConfig
   * @generated
   */
  public Adapter createServerConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.ApplicationConfig <em>Application Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.ApplicationConfig
   * @generated
   */
  public Adapter createApplicationConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.DatabaseConfig <em>Database Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.DatabaseConfig
   * @generated
   */
  public Adapter createDatabaseConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.ensias.dsl.microserviceDSL.ActuatorConfig <em>Actuator Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.ensias.dsl.microserviceDSL.ActuatorConfig
   * @generated
   */
  public Adapter createActuatorConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MicroserviceDSLAdapterFactory
