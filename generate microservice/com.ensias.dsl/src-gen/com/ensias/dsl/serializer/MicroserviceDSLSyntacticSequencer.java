/*
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.serializer;

import com.ensias.dsl.services.MicroserviceDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MicroserviceDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MicroserviceDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActuatorConfig_ApplicationConfig___ActuatorConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5___or___ApplicationConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5__;
	protected AbstractElementAlias match_Gateway___RoutesKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MicroserviceDSLGrammarAccess) access;
		match_ActuatorConfig_ApplicationConfig___ActuatorConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5___or___ApplicationConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getActuatorConfigAccess().getActuatorConfigKeyword_0()), new TokenAlias(false, false, grammarAccess.getActuatorConfigAccess().getLeftCurlyBracketKeyword_1()), new TokenAlias(false, false, grammarAccess.getActuatorConfigAccess().getRightCurlyBracketKeyword_5())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getApplicationConfigAccess().getApplicationConfigKeyword_0()), new TokenAlias(false, false, grammarAccess.getApplicationConfigAccess().getLeftCurlyBracketKeyword_1()), new TokenAlias(false, false, grammarAccess.getApplicationConfigAccess().getRightCurlyBracketKeyword_5())));
		match_Gateway___RoutesKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getGatewayAccess().getRoutesKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getGatewayAccess().getLeftCurlyBracketKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getGatewayAccess().getRightCurlyBracketKeyword_5_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActuatorConfig_ApplicationConfig___ActuatorConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5___or___ApplicationConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5__.equals(syntax))
				emit_ActuatorConfig_ApplicationConfig___ActuatorConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5___or___ApplicationConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Gateway___RoutesKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q.equals(syntax))
				emit_Gateway___RoutesKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('application-config' '{' '}') | ('actuator-config' '{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ActuatorConfig_ApplicationConfig___ActuatorConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5___or___ApplicationConfigKeyword_0_LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_5__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('routes' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     port=INT (ambiguity) 'dependencies' '{' '}' '}' (rule end)
	 *     port=INT (ambiguity) 'dependencies' '{' customDeps+=Dependency
	 
	 * </pre>
	 */
	protected void emit_Gateway___RoutesKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
