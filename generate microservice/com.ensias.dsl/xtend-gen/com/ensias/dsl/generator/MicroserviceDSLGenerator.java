/**
 * generated by Xtext 2.37.0
 */
package com.ensias.dsl.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.ensias.dsl.microserviceDSL.*;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MicroserviceDSLGenerator extends AbstractGenerator {
    @Override
    public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
        for (EObject root : resource.getContents()) {
            if (root instanceof Model) {
                Model model = (Model) root;
                generateProjectStructure(model, fsa);
            }
        }
    }
    
    // To-do Bassim 
    private void generateProjectStructure(Model model, IFileSystemAccess2 fsa) {
        // Generate parent pom.xml
        generateParentPom(model, fsa);
        
        // Generate Discovery Service
        generateDiscoveryService(model.getDiscovery(), model, fsa);
        
        // Generate Gateway Service
        generateGatewayService(model.getGateway(), model, fsa);
        
        // Generate Config Server
        generateConfigServer(model.getConfigServer(), model, fsa);
        
        // Generate Microservices
        for (Service service : model.getServices()) {
            generateMicroservice(service, model, fsa);
        }
    }
    
    // to-do Bassim 
    private void generateParentPom(Model model, IFileSystemAccess2 fsa) {
        StringBuilder pomContent = new StringBuilder();
        pomContent.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
                 .append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n")
                 .append("    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n")
                 .append("    <modelVersion>4.0.0</modelVersion>\n\n")
                 .append("    <groupId>").append(model.getGroupName()).append("</groupId>\n")
                 .append("    <artifactId>").append(model.getName()).append("</artifactId>\n")
                 .append("    <version>").append(model.getVersion().replace("\"", "")).append("</version>\n")
                 .append("    <packaging>pom</packaging>\n\n")
                 .append("    <name>").append(model.getName()).append("</name>\n")
                 .append("    <description>").append(model.getDescription().replace("\"", "")).append("</description>\n\n")
                 .append("    <parent>\n")
                 .append("        <groupId>org.springframework.boot</groupId>\n")
                 .append("        <artifactId>spring-boot-starter-parent</artifactId>\n")
                 .append("        <version>2.7.0</version>\n")
                 .append("        <relativePath/>\n")
                 .append("    </parent>\n\n")
                 .append("    <modules>\n")
                 .append("        <module>").append(model.getDiscovery().getName()).append("</module>\n")
                 .append("        <module>").append(model.getGateway().getName()).append("</module>\n")
                 .append("        <module>").append(model.getConfigServer().getName()).append("</module>\n");

        for (Service service : model.getServices()) {
            pomContent.append("        <module>").append(service.getName()).append("</module>\n");
        }

        pomContent.append("    </modules>\n")
                 .append("</project>");

        fsa.generateFile("pom.xml", pomContent.toString());
    }

    //to-do Bassim
    private void generateDiscoveryService(Discovery discovery, Model model, IFileSystemAccess2 fsa) {
        String basePackagePath = model.getGroupName().replace(".", "/");
        String servicePath = discovery.getName() + "/";

        // Generate pom.xml
        StringBuilder pomContent = new StringBuilder();
        pomContent.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
                 .append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n")
                 .append("    <modelVersion>4.0.0</modelVersion>\n\n")
                 .append("    <artifactId>").append(discovery.getName()).append("</artifactId>\n\n")
                 .append("    <parent>\n")
                 .append("        <groupId>").append(model.getGroupName()).append("</groupId>\n")
                 .append("        <artifactId>").append(model.getName()).append("</artifactId>\n")
                 .append("        <version>").append(model.getVersion().replace("\"", "")).append("</version>\n")
                 .append("    </parent>\n\n")
                 .append("    <properties>\n")
                 .append("        <spring-cloud.version>2021.0.3</spring-cloud.version>\n")
                 .append("    </properties>\n\n")
                 .append("    <dependencies>\n")
                 .append("        <dependency>\n")
                 .append("            <groupId>org.springframework.cloud</groupId>\n")
                 .append("            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n")
                 .append("        </dependency>\n");

        // Add custom dependencies
        for (Dependency dep : discovery.getCustomDeps()) {
            addDependencyToPom(pomContent, dep);
        }

        pomContent.append("    </dependencies>\n\n")
                 .append("    <dependencyManagement>\n")
                 .append("        <dependencies>\n")
                 .append("            <dependency>\n")
                 .append("                <groupId>org.springframework.cloud</groupId>\n")
                 .append("                <artifactId>spring-cloud-dependencies</artifactId>\n")
                 .append("                <version>${spring-cloud.version}</version>\n")
                 .append("                <type>pom</type>\n")
                 .append("                <scope>import</scope>\n")
                 .append("            </dependency>\n")
                 .append("        </dependencies>\n")
                 .append("    </dependencyManagement>\n")
                 .append("</project>");

        fsa.generateFile(servicePath + "pom.xml", pomContent.toString());

        // Generate application.yml
        StringBuilder ymlContent = new StringBuilder();
        ymlContent.append("server:\n")
                 .append("  port: ").append(discovery.getPort()).append("\n\n")
                 .append("eureka:\n")
                 .append("  client:\n")
                 .append("    registerWithEureka: false\n")
                 .append("    fetchRegistry: false\n");
        
        if (discovery.getDefaultZone() != null) {
            ymlContent.append("    serviceUrl:\n")
                     .append("      defaultZone: ").append(discovery.getDefaultZone().replace("\"", "")).append("\n");
        }

        fsa.generateFile(servicePath + "src/main/resources/application.yml", ymlContent.toString());

        // Generate main application class
        StringBuilder mainClass = new StringBuilder();
        mainClass.append("package ").append(model.getGroupName()).append(".discovery;\n\n")
                .append("import org.springframework.boot.SpringApplication;\n")
                .append("import org.springframework.boot.autoconfigure.SpringBootApplication;\n")
                .append("import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n")
                .append("@SpringBootApplication\n")
                .append("@EnableEurekaServer\n")
                .append("public class DiscoveryApplication {\n\n")
                .append("    public static void main(String[] args) {\n")
                .append("        SpringApplication.run(DiscoveryApplication.class, args);\n")
                .append("    }\n")
                .append("}\n");

        fsa.generateFile(servicePath + "src/main/java/" + basePackagePath + "/discovery/DiscoveryApplication.java",
                mainClass.toString());
    }

    
    // To-do Bassim
    private void generateConfigServer(ConfigServer configServer, Model model, IFileSystemAccess2 fsa) {
        String basePackagePath = model.getGroupName().replace(".", "/");
        String servicePath = configServer.getName() + "/";

        // Generate pom.xml
        StringBuilder pomContent = new StringBuilder();
        pomContent.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
            .append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n")
            .append(" <modelVersion>4.0.0</modelVersion>\n\n")
            .append(" <artifactId>").append(configServer.getName()).append("</artifactId>\n\n")
            .append(" <parent>\n")
            .append(" <groupId>").append(model.getGroupName()).append("</groupId>\n")
            .append(" <artifactId>").append(model.getName()).append("</artifactId>\n")
            .append(" <version>").append(model.getVersion().replace("\"", "")).append("</version>\n")
            .append(" </parent>\n\n")
            .append(" <dependencies>\n")
            .append(" <dependency>\n")
            .append(" <groupId>org.springframework.cloud</groupId>\n")
            .append(" <artifactId>spring-cloud-config-server</artifactId>\n")
            .append(" </dependency>\n");

        // Add custom dependencies
        for (Dependency dep : configServer.getCustomDeps()) {
            addDependencyToPom(pomContent, dep);
        }

        pomContent.append(" </dependencies>\n")
            .append("</project>");

        fsa.generateFile(servicePath + "pom.xml", pomContent.toString());

        // Generate application.yml with git configuration
        StringBuilder ymlContent = new StringBuilder();
        ymlContent.append("server:\n")
            .append(" port: ").append(configServer.getPort()).append("\n\n")
            .append("spring:\n")
            .append("	cloud:\n")
            .append(" 		config:\n")
            .append(" 			server:\n")
            .append(" 				git:\n")
            .append(" 					uri: ").append(configServer.getGitUri()).append("\n");
        
        // Add git branch if specified
        if (configServer.getGitBranch() != null && !configServer.getGitBranch().isEmpty()) {
            ymlContent.append(" 					default-label: ").append(configServer.getGitBranch()).append("\n");
        }

        fsa.generateFile(servicePath + "src/main/resources/application.yml", ymlContent.toString());

        // Generate main application class
        StringBuilder mainClass = new StringBuilder();
        mainClass.append("package ").append(model.getGroupName()).append(".config;\n\n")
            .append("import org.springframework.boot.SpringApplication;\n")
            .append("import org.springframework.boot.autoconfigure.SpringBootApplication;\n")
            .append("import org.springframework.cloud.config.server.EnableConfigServer;\n\n")
            .append("@SpringBootApplication\n")
            .append("@EnableConfigServer\n")
            .append("public class ConfigServerApplication {\n\n")
            .append(" public static void main(String[] args) {\n")
            .append(" SpringApplication.run(ConfigServerApplication.class, args);\n")
            .append(" }\n")
            .append("}\n");

        fsa.generateFile(servicePath + "src/main/java/" + basePackagePath + "/config/ConfigServerApplication.java",
            mainClass.toString());
    }


    // To-do Nour
    private void generateGatewayService(Gateway gateway, Model model, IFileSystemAccess2 fsa) {
        String basePackagePath = model.getGroupName().replace(".", "/");
        String servicePath = gateway.getName() + "/";

        // Generate pom.xml
        StringBuilder pomContent = new StringBuilder();
        pomContent.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
                 .append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n")
                 .append("    <modelVersion>4.0.0</modelVersion>\n\n")
                 .append("    <artifactId>").append(gateway.getName()).append("</artifactId>\n\n")
                 .append("    <parent>\n")
                 .append("        <groupId>").append(model.getGroupName()).append("</groupId>\n")
                 .append("        <artifactId>").append(model.getName()).append("</artifactId>\n")
                 .append("        <version>").append(model.getVersion().replace("\"", "")).append("</version>\n")
                 .append("    </parent>\n\n")
                 .append("    <properties>\n")
                 .append("        <spring-cloud.version>2021.0.3</spring-cloud.version>\n")
                 .append("    </properties>\n\n")
                 .append("    <dependencies>\n")
                 .append("        <dependency>\n")
                 .append("            <groupId>org.springframework.cloud</groupId>\n")
                 .append("            <artifactId>spring-cloud-starter-gateway</artifactId>\n")
                 .append("        </dependency>\n")
                 .append("        <dependency>\n")
                 .append("            <groupId>org.springframework.cloud</groupId>\n")
                 .append("            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n")
                 .append("        </dependency>\n");

        // Add custom dependencies
        for (Dependency dep : gateway.getCustomDeps()) {
            addDependencyToPom(pomContent, dep);
        }

        pomContent.append("    </dependencies>\n\n")
                 .append("    <dependencyManagement>\n")
                 .append("        <dependencies>\n")
                 .append("            <dependency>\n")
                 .append("                <groupId>org.springframework.cloud</groupId>\n")
                 .append("                <artifactId>spring-cloud-dependencies</artifactId>\n")
                 .append("                <version>${spring-cloud.version}</version>\n")
                 .append("                <type>pom</type>\n")
                 .append("                <scope>import</scope>\n")
                 .append("            </dependency>\n")
                 .append("        </dependencies>\n")
                 .append("    </dependencyManagement>\n")
                 .append("</project>");

        fsa.generateFile(servicePath + "pom.xml", pomContent.toString());

        // Generate application.yml
        StringBuilder ymlContent = new StringBuilder();
        ymlContent.append("server:\n")
                 .append("  port: ").append(gateway.getPort()).append("\n\n")
                 .append("spring:\n")
                 .append("  application:\n")
                 .append("    name: ").append(gateway.getName()).append("\n")
                 .append("  cloud:\n")
                 .append("    gateway:\n")
                 .append("      discovery:\n")
                 .append("        locator:\n")
                 .append("          enabled: true\n");

        // Add routes configuration if present
        if (!gateway.getRoutes().isEmpty()) {
            ymlContent.append("      routes:\n");
            for (RouteConfig route : gateway.getRoutes()) {
                ymlContent.append("      - id: ").append(route.getService().getName()).append("\n")
                         .append("        uri: lb://").append(route.getService().getName().toUpperCase()).append("\n")
                         .append("        predicates:\n")
                         .append("        - Path=").append(route.getPath()).append("\n");
            }
        }

        ymlContent.append("\neureka:\n")
                 .append("  client:\n")
                 .append("    serviceUrl:\n")
                 .append("      defaultZone: http://localhost:8761/eureka/\n");

        fsa.generateFile(servicePath + "src/main/resources/application.yml", ymlContent.toString());

        // Generate main application class
        StringBuilder mainClass = new StringBuilder();
        mainClass.append("package ").append(model.getGroupName()).append(".gateway;\n\n")
                .append("import org.springframework.boot.SpringApplication;\n")
                .append("import org.springframework.boot.autoconfigure.SpringBootApplication;\n")
                .append("import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n")
                .append("@SpringBootApplication\n")
                .append("@EnableDiscoveryClient\n")
                .append("public class GatewayApplication {\n\n")
                .append("    public static void main(String[] args) {\n")
                .append("        SpringApplication.run(GatewayApplication.class, args);\n")
                .append("    }\n")
                .append("}\n");

        fsa.generateFile(servicePath + "src/main/java/" + basePackagePath + "/gateway/GatewayApplication.java",
                mainClass.toString());
    }





    private void generateMicroservice(Service service, Model model, IFileSystemAccess2 fsa) {
        String basePackagePath = model.getGroupName().replace(".", "/");
        String servicePath = service.getName() + "/";

        // Generate pom.xml with dependencies
        generateServicePom(service, model, servicePath, fsa);

        // Generate application.yml
        generateServiceApplicationYml(service, servicePath, fsa);

        // Generate main application class
        generateServiceMainClass(service, model, basePackagePath, servicePath, fsa);
    }



    // ------------------------------------- Helper Functions --------------------------------------------

    private void generateServicePom(Service service, Model model, String servicePath, IFileSystemAccess2 fsa) {
        StringBuilder pomContent = new StringBuilder();
        pomContent.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
                .append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\">\n")
                .append("    <modelVersion>4.0.0</modelVersion>\n\n")
                .append("    <artifactId>").append(service.getName()).append("</artifactId>\n\n")
                .append("    <parent>\n")
                .append("        <groupId>").append(model.getGroupName()).append("</groupId>\n")
                .append("        <artifactId>").append(model.getName()).append("</artifactId>\n")
                .append("        <version>").append(model.getVersion().replace("\"", "")).append("</version>\n")
                .append("    </parent>\n\n")
                .append("    <dependencies>\n");

        // Add Spring Boot Starter Web dependency
        pomContent.append("        <dependency>\n")
                .append("            <groupId>org.springframework.boot</groupId>\n")
                .append("            <artifactId>spring-boot-starter-web</artifactId>\n")
                .append("        </dependency>\n");

        // Add Eureka Client dependency
        pomContent.append("        <dependency>\n")
                .append("            <groupId>org.springframework.cloud</groupId>\n")
                .append("            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n")
                .append("        </dependency>\n");

        // Process additional dependencies based on service configuration
        for (Dependency dependency : service.getDependencies()) {
            addDependencyToPom(pomContent, dependency);
        }

        // Add database driver dependency if database config exists
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof DatabaseConfig) {
                DatabaseConfig dbConfig = (DatabaseConfig) config;
                switch (dbConfig.getDriver()) {
                    case MYSQL:
                        pomContent.append("        <dependency>\n")
                                .append("            <groupId>mysql</groupId>\n")
                                .append("            <artifactId>mysql-connector-java</artifactId>\n")
                                .append("            <scope>runtime</scope>\n")
                                .append("        </dependency>\n");
                        break;
                    case POSTGRESQL:
                        pomContent.append("        <dependency>\n")
                                .append("            <groupId>org.postgresql</groupId>\n")
                                .append("            <artifactId>postgresql</artifactId>\n")
                                .append("            <scope>runtime</scope>\n")
                                .append("        </dependency>\n");
                        break;
                    case H2:
                        pomContent.append("        <dependency>\n")
                                .append("            <groupId>com.h2database</groupId>\n")
                                .append("            <artifactId>h2</artifactId>\n")
                                .append("            <scope>runtime</scope>\n")
                                .append("        </dependency>\n");
                        break;
                }
            }
        }

        // Add Spring Cloud dependency management
        pomContent.append("    </dependencies>\n\n")
                .append("    <dependencyManagement>\n")
                .append("        <dependencies>\n")
                .append("            <dependency>\n")
                .append("                <groupId>org.springframework.cloud</groupId>\n")
                .append("                <artifactId>spring-cloud-dependencies</artifactId>\n")
                .append("                <version>2021.0.3</version>\n")
                .append("                <type>pom</type>\n")
                .append("                <scope>import</scope>\n")
                .append("            </dependency>\n")
                .append("        </dependencies>\n")
                .append("    </dependencyManagement>\n\n")
                .append("    <build>\n")
                .append("        <plugins>\n")
                .append("            <plugin>\n")
                .append("                <groupId>org.springframework.boot</groupId>\n")
                .append("                <artifactId>spring-boot-maven-plugin</artifactId>\n")
                .append("                <configuration>\n")
                .append("                    <excludes>\n")
                .append("                        <exclude>\n")
                .append("                            <groupId>org.projectlombok</groupId>\n")
                .append("                            <artifactId>lombok</artifactId>\n")
                .append("                        </exclude>\n")
                .append("                    </excludes>\n")
                .append("                </configuration>\n")
                .append("            </plugin>\n")
                .append("        </plugins>\n")
                .append("    </build>\n")
                .append("</project>");

        fsa.generateFile(servicePath + "pom.xml", pomContent.toString());
    }

    private void generateServiceApplicationYml(Service service, String servicePath, IFileSystemAccess2 fsa) {
        StringBuilder ymlContent = new StringBuilder();
        boolean hasSpringConfig = false;

        // Process server configuration
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof ServerConfig) {
                ServerConfig serverConfig = (ServerConfig) config;
                ymlContent.append("server:\n")
                        .append("  port: ").append(serverConfig.getPort()).append("\n");

                // Add context-path if specified
                if (serverConfig.getContextPath() != null && !serverConfig.getContextPath().isEmpty()) {
                    ymlContent.append("  servlet:\n")
                            .append("    context-path: ").append(serverConfig.getContextPath().replace("\"", "")).append("\n");
                }
                ymlContent.append("\n");
            }
        }

        // Start spring configuration block
        ymlContent.append("spring:\n");

        // Process application configuration
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof ApplicationConfig) {
                ApplicationConfig appConfig = (ApplicationConfig) config;
                hasSpringConfig = true;

                // Add application name if specified
                if (appConfig.getAppName() != null && !appConfig.getAppName().isEmpty()) {
                    ymlContent.append("  application:\n")
                            .append("    name: ").append(appConfig.getAppName().replace("\"", "")).append("\n");
                }

                // Add profile if specified
                if (appConfig.getProfile() != null && !appConfig.getProfile().isEmpty()) {
                    ymlContent.append("  profiles:\n")
                            .append("    active: ").append(appConfig.getProfile().replace("\"", "")).append("\n");
                }
            }
        }

        // Process database configuration immediately after application config
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof DatabaseConfig) {
                DatabaseConfig dbConfig = (DatabaseConfig) config;
                hasSpringConfig = true;

                ymlContent.append("  datasource:\n")
                        .append("    url: ").append(dbConfig.getDbUrl().replace("\"", "")).append("\n")
                        .append("    username: ").append(dbConfig.getDbUsername().replace("\"", "")).append("\n")
                        .append("    password: ").append(dbConfig.getDbPassword().replace("\"", "")).append("\n");

                // Add JPA DDL configuration if specified
                if (dbConfig.getDdl() != null) {
                    ymlContent.append("  jpa:\n")
                            .append("    hibernate:\n")
                            .append("      ddl-auto: ").append(dbConfig.getDdl().toString().toLowerCase()).append("\n");
                }
            }
        }

        // Add a newline after spring configuration if it was used
        if (hasSpringConfig) {
            ymlContent.append("\n");
        }

        // Process logging configuration (moved after database config)
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof ApplicationConfig) {
                ApplicationConfig appConfig = (ApplicationConfig) config;
                if (appConfig.getLoggingLevel() != null) {
                    ymlContent.append("logging:\n")
                            .append("  level:\n")
                            .append("    root: ").append(appConfig.getLoggingLevel().toString()).append("\n\n");
                }
            }
        }

        // Process actuator configuration
        for (ServiceConfigEntry config : service.getConfiguration()) {
            if (config instanceof ActuatorConfig) {
                ActuatorConfig actuatorConfig = (ActuatorConfig) config;
                ymlContent.append("management:\n");

                // Add healthcheck path if specified
                if (actuatorConfig.getHealthcheckPath() != null && !actuatorConfig.getHealthcheckPath().isEmpty()) {
                    ymlContent.append("  endpoints:\n")
                            .append("    web:\n")
                            .append("      base-path: ").append(actuatorConfig.getHealthcheckPath().replace("\"", "")).append("\n");
                }

                // Add metrics configuration if specified
                if (actuatorConfig.getMetricsEnabled() != null) {
                    ymlContent.append("  endpoints:\n")
                            .append("    metrics:\n")
                            .append("      enabled: ").append(actuatorConfig.getMetricsEnabled()).append("\n");
                }

                // Add info configuration if specified
                if (actuatorConfig.getInfoEnabled() != null) {
                    ymlContent.append("  endpoints:\n")
                            .append("    info:\n")
                            .append("      enabled: ").append(actuatorConfig.getInfoEnabled()).append("\n\n");
                }
            }
        }

        // Add Eureka client configuration
        ymlContent.append("eureka:\n")
                .append("  client:\n")
                .append("    serviceUrl:\n")
                .append("      defaultZone: http://localhost:8761/eureka/\n");

        fsa.generateFile(servicePath + "src/main/resources/application.yml", ymlContent.toString());
    }


    // To-do Hajar & Fatiha
    private void generateServiceMainClass(Service service, Model model, String basePackagePath, String servicePath, IFileSystemAccess2 fsa) {
        StringBuilder mainClass = new StringBuilder();

        // Package declaration
        mainClass.append("package ").append(model.getGroupName()).append(".").append(service.getName()).append(";\n\n");

        // Imports
        mainClass.append("import org.springframework.boot.SpringApplication;\n")
                .append("import org.springframework.boot.autoconfigure.SpringBootApplication;\n")
                .append("import org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n");

        // Add JPA import if needed
        boolean hasJpa = service.getDependencies().contains(Dependency.JPA);
        if (hasJpa) {
            mainClass.append("import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n");
        }

        mainClass.append("\n");

        // Class annotations
        mainClass.append("@SpringBootApplication\n")
                .append("@EnableDiscoveryClient\n");

        if (hasJpa) {
            mainClass.append("@EnableJpaRepositories\n");
        }

        // Class declaration
        String className = capitalize(service.getName()) + "Application";
        mainClass.append("public class ").append(className).append(" {\n\n")
                .append("    public static void main(String[] args) {\n")
                .append("        SpringApplication.run(").append(className).append(".class, args);\n")
                .append("    }\n");

        // Add basic health check endpoint if actuator is enabled
        if (service.getDependencies().contains(Dependency.ACTUATOR)) {
            mainClass.append("\n    @RestController\n")
                    .append("    public static class HealthController {\n\n")
                    .append("        @GetMapping(\"/health\")\n")
                    .append("        public ResponseEntity<String> health() {\n")
                    .append("            return ResponseEntity.ok(\"Service is running\");\n")
                    .append("        }\n")
                    .append("    }\n");
        }

        mainClass.append("}\n");

        // Generate the file
        String filePath = servicePath + "src/main/java/" + basePackagePath + "/" +
                service.getName().toLowerCase() + "/" + className + ".java";
        fsa.generateFile(filePath, mainClass.toString());

        // Generate base package structure
        generatePackageStructure(service, model, basePackagePath, servicePath, fsa);
    }

    private void generatePackageStructure(Service service, Model model, String basePackagePath, String servicePath, IFileSystemAccess2 fsa) {
        String basePath = servicePath + "src/main/java/" + basePackagePath + "/" + service.getName().toLowerCase() + "/";

        // Create basic package structure
        String[] packages = {"controller", "service", "model", "repository", "config"};

        for (String pkg : packages) {
            String packagePath = basePath + pkg;
            // Create empty .gitkeep file to maintain directory structure
            fsa.generateFile(packagePath + "/.gitkeep", "");
        }
    }

    // Helper method to capitalize first letter

    private String capitalize(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
    

    // Helper methods for database configuration
    // to-do nour
    private String getDriverClassName(DatabaseDriver driver) {
        switch (driver) {
            case MYSQL:
                return "com.mysql.cj.jdbc.Driver";
            case POSTGRESQL:
                return "org.postgresql.Driver";
            case H2:
                return "org.h2.Driver";
            default:
                return "com.mysql.cj.jdbc.Driver";
        }
    }

    // to-do nour
    private String getDdlMode(DdlType ddl) {
        switch (ddl) {
            case CREATE:
                return "create";
            case CREATE_UPDATE:
                return "update";
            default:
                return "none";
        }
    }
    
    // Helper method to add dependencies to pom.xml
    // to-do bassim
    private void addDependencyToPom(StringBuilder pomContent, Dependency dep) {
        switch (dep) {
            case SPRING_WEB:
                pomContent.append("        <dependency>\n")
                         .append("            <groupId>org.springframework.boot</groupId>\n")
                         .append("            <artifactId>spring-boot-starter-web</artifactId>\n")
                         .append("        </dependency>\n");
                break;
            case ACTUATOR:
                pomContent.append("        <dependency>\n")
                         .append("            <groupId>org.springframework.boot</groupId>\n")
                         .append("            <artifactId>spring-boot-starter-actuator</artifactId>\n")
                         .append("        </dependency>\n");
                break;
            case LOMBOK:
                pomContent.append("        <dependency>\n")
                         .append("            <groupId>org.projectlombok</groupId>\n")
                         .append("            <artifactId>lombok</artifactId>\n")
                         .append("            <optional>true</optional>\n")
                         .append("        </dependency>\n");
                break;
            case JPA:
                pomContent.append("        <dependency>\n")
                         .append("            <groupId>org.springframework.boot</groupId>\n")
                         .append("            <artifactId>spring-boot-starter-data-jpa</artifactId>\n")
                         .append("        </dependency>\n");
                break;
            case CONFIG_CLIENT:
                pomContent.append("        <dependency>\n")
                         .append("            <groupId>org.springframework.cloud</groupId>\n")
                         .append("            <artifactId>spring-cloud-starter-config</artifactId>\n")
                         .append("        </dependency>\n");
                break;
        }
    }
}
